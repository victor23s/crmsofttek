/*
M?todo para cargar un Web Resource en fomato XML para ser utilizado.

<Root>
<actions>
	<action type="multipleselect" attributename="new_paises" entityname="new_pais" entityid="new_paisid" entityattributename="new_name" iframename="IFRAME_paismultiple"/>

	<action type="lookuptocombo" attributename="new_paisid" entityname="new_pais" entityid="new_paisid" entityattributename="new_name" iframename="IFRAME_pais"/>
	<action type="lookuptoradio" attributename="new_paisid" entityname="new_pais" entityid="new_paisid" entityattributename="new_name" iframename="IFRAME_paisradio"/>

	
    <action type="backgroundcolor" attributename="description" color="#FFF00F"/>
	<action type="backgroundcolor" attributename="address1_line1" color="#FF660F"/>
	<action type="backgroundcolor" attributename="address1_line2" color="#33300F"/>
	<action type="backgroundcolor" attributename="address1_line3" color="#55500F"/>
	<action type="fontcolor" attributename="address1_line2" color="#FFFFFF"/>
	<action type="fontcolor" attributename="address1_line3" color="#FFFFFF"/>
		
	<action type="concat" destattribute="description" attributestoconcat="address1_name,address1_line1,address1_line2,address1_line3,address1_city,address1_postalcode,address1_stateorprovince,address1_country,address1_telephone1" stringseparator=";"/>
</actions>
<validations>
	<validation attributename="accountnumber" type="number" RegEx=""/>
	<validation attributename="address1_name" type="email" RegEx=""/>
	<validation attributename="address2_line1" type="ipaddress" RegEx=""/>
	<validation attributename="address2_line2" type="url" RegEx=""/>
</validations>
<attributes>
    <attribute name="accountcategorycode" value="1" showattributes="primarycontactid,accountnumber" hideattributes="" showsections="general/address,general/shipping information" hidesections="" showtabs="notes and activities,administration" hidetabs="" setrequiredlevel="required:fax-address1_city,recommended:address1_name"/>
    <attribute name="accountcategorycode" value="2" showattributes="" hideattributes="primarycontactid,accountnumber" showsections="" hidesections="general/address,general/shipping information" showtabs="" hidetabs="notes and activities,administration"
	setrequiredlevel="none:fax-address1_city-address1_name-websiteurl"/>
</attributes>
</Root>
*/

/*
DynamicForm method.
*/
function Actions() {
    LoadXmlWebResource("new_new_test_xml");
    var nodePath = "//Root/actions/action";

    var nodelist = doc.selectNodes(nodePath);
    //Actions
    for (var i = 0; i < nodelist.length; i++) {

        var attributes = nodelist(i).attributes;
        var type = attributes.getNamedItem("type").nodeValue;

        switch (type) {
        case "concat":
            var destattribute = attributes.getNamedItem("destattribute").nodeValue;
            var attributestoconcat = attributes.getNamedItem("attributestoconcat").nodeValue;
            var stringseparator = attributes.getNamedItem("stringseparator").nodeValue;
            Concat(destattribute, attributestoconcat, stringseparator);
            break;
        case "backgroundcolor":
            var attributename = attributes.getNamedItem("attributename").nodeValue;
            var color = attributes.getNamedItem("color").nodeValue;
            setBackgroundColor(attributename, color);
            break;
        case "fontcolor":
            var attributename = attributes.getNamedItem("attributename").nodeValue;
            var color = attributes.getNamedItem("color").nodeValue;
            setFontColor(attributename, color);
            break;
        case "lookuptocombo":
            case "lookuptoradio":
            case "multipleselect":
            var attributename = attributes.getNamedItem("attributename").nodeValue;
            var entityname = attributes.getNamedItem("entityname").nodeValue;
            var iframename = attributes.getNamedItem("iframename").nodeValue;
            var entityid = attributes.getNamedItem("entityid").nodeValue;
            var entityattributename = attributes.getNamedItem("entityattributename").nodeValue;
            if (type == "multipleselect") {
                MultipleSelect(attributename, entityname, iframename, entityid, entityattributename);
            }
            else {
                LookupToCombo(attributename, entityname, iframename, entityid, entityattributename, type);
            }
            break;
        }
    }
}

function MultipleSelect(attributename, entityname, iframename, entityid, entityattributename) {
    var result = RetrieveEntitiesByFilter(entityname, "statecode", "Active", entityid + "," + entityattributename, false, "");
    var i = 0;
    var svalue = "";
    var svalue = getValue(attributename);
    if (!svalue) {
        svalue = "";
    }
    var HTMLselect = "<form style='font-size:11Px;font-family:Segoe UI, Tahoma, Arial;'>";
    for (i = 0; i < result.recordCount; i++) {
        var selected = "";
        var name = eval("result[i]." + entityattributename);
        var id = eval("result[i]." + entityid);

        if (svalue.indexOf(id) != -1) {
            selected = "CHECKED";
        }

        var js = "onclick='parent.ActualizoSelects(document," + result.recordCount + ",document.all.attributename.value);'";
        HTMLselect += "<input " + js + " type='checkbox' name='opt" + i + "' id='opt" + i + "' nombre='" + name + "' value='" + id + "' " + selected + " /> " + name + "<br />";
    }
    HTMLselect += "</form> ";
    HTMLselect += "<input type='hidden' id='entityname' name='entityname' value='" + entityname + "'/><input type='hidden' id='attributename' name='attributename' value='" + attributename + "'/>";
    var myIframe = document.getElementById(iframename);
    myIframe.contentWindow.document.body.innerHTML = HTMLselect;
    myIframe.contentWindow.document.body.style.margin = "0px;";
}

function ActualizoSelects(doc, cant, attributename) {
    var str = '';
    var i = 0;
    for (i = 0; i < cant; i++) {
        if (doc.getElementById('opt' + i).checked) {
            if (i != 0) {
                str += "\n";
            }
            str += doc.getElementById('opt' + i).value + ';' + doc.getElementById('opt' + i).nombre;
        }
    }
    setValue(attributename, str);
}

function LookupToCombo(attributename, entityname, iframename, entityid, entityattributename, type) {
    var result = RetrieveEntitiesByFilter(entityname, "statecode", "Active", entityid + "," + entityattributename, false, "");
    var i = 0;
    var svalue = "";
    var objvalue = getValue(attributename);
    if (!objvalue) {
        svalue = "";
    }
    else {
        svalue = objvalue[i].id;
    }
    var HTMLselect = "";

    if (type == "lookuptocombo") {
        HTMLselect = "<select style='font-size:11Px;font-family:Segoe UI, Tahoma, Arial;' onchange='var select_list_selected_index = this.selectedIndex;var text = this.options[select_list_selected_index].text;var value = this.value;parent.setLookupValue(value,text,document.all.entityname.value,document.all.attributename.value);'>";
        HTMLselect += "<option value=''></option>";
    }
    else {
        HTMLselect = "<form style='font-size:11Px;font-family:Segoe UI, Tahoma, Arial;'>";
    }
    for (i = 0; i < result.recordCount; i++) {
        var selected = "";
        var name = eval("result[i]." + entityattributename);
        var id = eval("result[i]." + entityid);
        if (svalue == id) {
            if (type == "lookuptocombo") {
                selected = "SELECTED";
            }
            else {
                selected = "CHECKED";
            }
        }
        if (type == "lookuptocombo") {
            HTMLselect += "<option " + selected + " value='" + id + "'>" + name + "</option>";
        }
        else {
            var js = "onclick='parent.setLookupValue(this.value,this.nombre,document.all.entityname.value,document.all.attributename.value);'";
            HTMLselect += "<input " + js + " type='radio' name='opt' nombre='" + name + "' value='" + id + "' " + selected + " /> " + name + "<br />";
        }
    }
    if (type == "lookuptocombo") {
        HTMLselect += "</select>";
    }
    else {
        HTMLselect += "</form> ";
    }
    HTMLselect += "<input type='hidden' id='entityname' name='entityname' value='" + entityname + "'/><input type='hidden' id='attributename' name='attributename' value='" + attributename + "'/>";
    var myIframe = document.getElementById(iframename);
    myIframe.contentWindow.document.body.innerHTML = HTMLselect;
    myIframe.contentWindow.document.body.style.margin = "0px;";
}

function setLookupValue(id, name, entityName, attributename) {
    if (id == "") {
        setValue(attributename, null);
        return;
    }
    var olookup = new Object();
    olookup.id = id;
    olookup.entityType = entityName;
    olookup.name = name;
    var olookupValue = new Array();
    olookupValue[0] = olookup;
    setValue(attributename, olookupValue);
}

function setFontColor(attributename, color) {
    document.getElementById(attributename).style.color = color;
}
function setBackgroundColor(attributename, color) {
    document.getElementById(attributename).style.backgroundColor = color;
}

function Concat(destattribute, attributestoconcat, stringseparator) {
    var strConcat = "";
    var arrattributestoconcat = attributestoconcat.split(",");
    for (j = 0; j < arrattributestoconcat.length; j++) {
        if (strConcat != "") {
            strConcat += stringseparator;
        }
        var value = getValue(arrattributestoconcat[j]);
        if (value != null) strConcat += getValue(arrattributestoconcat[j]);
    }
    setValue(destattribute, strConcat);

}

function Validations(ExecutionObj) {
    addNotification("", 1);
    form_validation = true;
    LoadXmlWebResource("new_new_test_xml");
    //Validations
    var nodePath = "//Root/validations/validation";
    var nodelist = doc.selectNodes(nodePath);
    for (var i = 0; i < nodelist.length; i++) {
        var attributes = nodelist(i).attributes;
        var attributename = attributes.getNamedItem("attributename").nodeValue;
        var type = attributes.getNamedItem("type").nodeValue;
        var RegEx = attributes.getNamedItem("RegEx").nodeValue;

        switch (type) {
        case "number":
            //var control=document.getElementById(attributename);
            //control.attachEvent("onkeyup",ValidateNumberCharacters);
            document.getElementById(attributename).onkeypress = ValidateNumberCharacters;
            form_validation = ValidateFieldNumber(attributename);
            break;
        case "email":
            form_validation = ValidateFieldEmail(attributename);
            break;
        case "url":
            form_validation = ValidateFieldUrl(attributename);
            break;
        case "ipaddress":
            form_validation = ValidateFieldIPAddress(attributename);
            break;
        }
    }

    if (!form_validation && ExecutionObj != null) {
        ExecutionObj.getEventArgs().preventDefault();
        return false;
    }
    return true;
}

var on_load = true;
function DynamicForm() {

    if (on_load) {
        Validations(null);
        Actions();
    }

    LoadXmlWebResource("new_new_test_xml");

    //Dynamic Form
    nodePath = "//Root/attributes/attribute";
    nodelist = doc.selectNodes(nodePath);
    for (var i = 0; i < nodelist.length; i++) {
        var attributes = nodelist(i).attributes;

        var attributename = attributes.getNamedItem("name").nodeValue;
        var attributevalue = attributes.getNamedItem("value").nodeValue;
        var showattributes = attributes.getNamedItem("showattributes").nodeValue;
        var hideattributes = attributes.getNamedItem("hideattributes").nodeValue;
        var showsections = attributes.getNamedItem("showsections").nodeValue;
        var hidesections = attributes.getNamedItem("hidesections").nodeValue;
        var showtabs = attributes.getNamedItem("showtabs").nodeValue;
        var hidetabs = attributes.getNamedItem("hidetabs").nodeValue;
        var setrequiredlevel = attributes.getNamedItem("setrequiredlevel").nodeValue;

        if (attributevalue == "" + getValue(attributename)) {
            //Mostrar campos
            var arrshowattributes = showattributes.split(",");
            for (j = 0; j < arrshowattributes.length; j++) {
                showhideAttribute(arrshowattributes[j], true);
            }

            //Ocultar campo
            var arrhideattributes = hideattributes.split(",");
            for (j = 0; j < arrhideattributes.length; j++) {
                showhideAttribute(arrhideattributes[j], false);
            }

            //Mostrar secciones
            var arrshowsections = showsections.split(",");
            for (j = 0; j < arrshowsections.length; j++) {
                var tab_section = arrshowsections[j].split("/");
                var tabname = tab_section[0];
                var sectionname = tab_section[1];
                showhideSection(tabname, sectionname, true);
            }

            //Ocultar secciones
            var arrhidesections = hidesections.split(",");
            for (j = 0; j < arrhidesections.length; j++) {
                var tab_section = arrhidesections[j].split("/");
                var tabname = tab_section[0];
                var sectionname = tab_section[1];
                showhideSection(tabname, sectionname, false);
            }

            //Mostrar tabs
            var arrshowtabs = showtabs.split(",");
            for (j = 0; j < arrshowtabs.length; j++) {
                showhideTab(arrshowtabs[j], true);
            }

            //Ocultar tabs		
            var arrhidetabs = hidetabs.split(",");
            for (j = 0; j < arrhidetabs.length; j++) {
                showhideTab(arrhidetabs[j], false);
            }

            //Requiredlevel de los atributos
            var arrsetrequiredlevel = setrequiredlevel.split(",");
            for (j = 0; j < arrsetrequiredlevel.length; j++) {
                //required:fax-address1_city,recommended:address1_name
                var req_level = arrsetrequiredlevel[j].split(":");
                var slevel = req_level[0];
                var attrs_req = req_level[1].split("-");
                for (v = 0; v < attrs_req.length; v++) {
                    setRequiredLevel(attrs_req[v], slevel);
                }
            }
        }
    }

    on_load = false;
}

/*
M?todos comunes de Dynamics CRM 2011 Forms.
*/
function getAttribute(attributename) {
    if (Xrm.Page.getAttribute(attributename)) return Xrm.Page.getAttribute(attributename);
    else return null;
}
function getControl(attributename) {
    if (Xrm.Page.getControl(attributename)) return Xrm.Page.getControl(attributename);
    else return null;
}

function getValue(attributename) {
    if (getAttribute(attributename)) return getAttribute(attributename).getValue();
    else return null;
}
function setValue(attributename, value) {
    if (getAttribute(attributename)) getAttribute(attributename).setValue(value);

}

function showhideAttribute(attributename, show) {
    if (getControl(attributename)) getControl(attributename).setVisible(show);
}

function showhideSection(tabname, sectionname, show) {
    var tab = Xrm.Page.ui.tabs.get(tabname);
    if (tab != null && sectionname != null) {
        var section = tab.sections.get(sectionname);
        if (section != null) {
            section.setVisible(show);
        }
    }
}
function showhideTab(tabname, show) {
    if (Xrm.Page.ui.tabs.get(tabname)) Xrm.Page.ui.tabs.get(tabname).setVisible(show);
}

function setRequiredLevel(attributename, req_level) {
    if (getAttribute(attributename)) getAttribute(attributename).setRequiredLevel(req_level);
}

function ValidateNumberCharacters() {

    var key = event.keyCode;
    if (! (((key >= 48) && (key <= 57)) || key == 45 || key == 46 || key == 32 || key == 40 || key == 41)) {
        //event.returnValue = false;
        return false;
    }

}

function ValidateField(fieldName, RegEx) {
    var regularExpression = RegEx;

    try {
        var control = getControl(fieldName);
        var fieldValue = getValue(fieldName);
        if (fieldValue == "" || fieldValue == null) return true;
        if (regularExpression.test(fieldValue) == false) {
            addNotification("El campo " + control.getLabel() + " no se encuentra en el formato adecuado.", 1);
            return false;
        }
        return true;
    }
    catch(e) {
        alert('Field validation failed with exception ' + e.Message);
        return false;
    }

}
function ValidateFieldNumber(fieldName) {

    var number = /(^-?\d\d*$)/;

    return ValidateField(fieldName, number);
}

function ValidateFieldEmail(fieldName) {

    var email = /(^[a-z]([a-z_\.]*)@([a-z_\.]*)([.][a-z]{3})$)|(^[a-z]([a-z_\.]*)@([a-z_\.]*)(\.[a-z]{3})(\.[a-z]{2})*$)/i;
    return ValidateField(fieldName, email);
}

function ValidateFieldUrl(fieldName) {
    var url = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/
    return ValidateField(fieldName, url);
}

function ValidateFieldIPAddress(fieldName) {
    var ip = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/;
    return ValidateField(fieldName, ip);
}

function addNotification(message, level) {
    /// The warning level of the message: [1 critial, 2 information, 3 warning]
    var notificationsArea = document.getElementById('crmNotifications');
    if (notificationsArea == null) {
        alert('div not found');
        return;
    }
    if (level == 1) {
        //critical
        notificationsArea.AddNotification('mep1', 1, 'source', message);
    }

    if (level == 2) {
        //Info
        notificationsArea.AddNotification('mep3', 3, 'source', message);
    }
    if (level == 3) {
        //Warning
        notificationsArea.AddNotification('mep2', 2, 'source', message);
    }
    if (message == "") {
        notificationsArea.SetNotifications(null, null);
    }
}

var xml_loaded = false;
var xmlPath = "../WebResources/";
var doc = new ActiveXObject("Microsoft.XMLDOM");
function LoadXmlWebResource(WebResource_name) {
    if (!xml_loaded) {
        doc.preserveWhiteSpace = true;
        doc.async = false;
        doc.load(xmlPath + WebResource_name);
        xml_loaded = true;
    }
}