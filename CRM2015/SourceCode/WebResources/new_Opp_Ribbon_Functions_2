/// <reference path="XrmPageTemplate.js" />
/* ------------------------------------------------------------------ Json 2  -------------------------------------------------------------------*/

if (!this.JSON) {
    this.JSON = {};
} (function () {
    function f(n) {
        return n < 10 ? '0' + n : n;
    }
    if (typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z': null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap, indent, meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    },
    rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap,
        partial, value = holder[key];
        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        switch (typeof value) {
        case 'string':
            return quote(value);
        case 'number':
            return isFinite(value) ? String(value) : 'null';
        case 'boolean':
            case 'null':
            return String(value);
        case 'object':
            if (!value) {
                return 'null';
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ': ':') + v);
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ': ':') + v);
                        }
                    }
                }
            }
            v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }
    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else if (typeof space === 'string') {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', {
                '': value
            });
        };
    }
    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({
                    '': j
                },
                '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
    }
} ());

/* ---------------------------------------------------------- Opp Ribbon Functions -----------------------------------------------------------*/

function retrieveRecord(odataSetName, recordId) {
    var jSonArray = new Array();
    var context = Xrm.Page.context;
    var serverUrl = context.getClientUrl();
    var ODATA_ENDPOINT = "/XRMServices/2011/OrganizationData.svc";

    //odataSetName is required, i.e. "AccountSet"
    if (!odataSetName) {
        alert("odataSetName is required.");
        return;
    }

    //Build the URI
    var odataUri = serverUrl + ODATA_ENDPOINT + "/" + odataSetName + "Set(guid'" + recordId + "')";

    //Asynchronous AJAX function to Retrieve CRM records using OData
    $.ajax({
        type: "GET",
        async: false,
        contentType: "application/json; charset=utf-8",
        datatype: "json",
        url: odataUri,
        beforeSend: function (XMLHttpRequest) {
            //Specifying this header ensures that the results will be returned as JSON.
            XMLHttpRequest.setRequestHeader("Accept", "application/json");
        },
        success: function (data, textStatus, XmlHttpRequest) {
            //alert("success");
            if (data && data.d != null) {
                jSonArray.push(data.d);
            }

            //alert(jSonArray[0].Name);
        },
        error: function (XmlHttpRequest, textStatus, errorThrown) {
            alert("Error : " + textStatus + ": " + xmlHttpRequest.statusText);
        }
    });

    return jSonArray;
}

function userIsHelpDesk() {
    var isHelpDesk = false;

    if (UsrHasRole("System Administrator") || UsrHasRole("SFTK CRM HELP DESK") || UsrHasRole("SFTK PIC")) {
        isHelpDesk = true;
    }

    //alert("isHelpDesk = " + isHelpDesk);
    return isHelpDesk;
}
function userIsSalesPlanAdmin() {
    var isSalesPlanAdmin = false;

    if (UsrHasRole("STK Sales Plan Admin")||UsrHasRole("STK Forecast Admin")) isSalesPlanAdmin = true;
    return isSalesPlanAdmin;
}
function userIsDiftoGuestSP() {
    var isSalesPlanAdmin = false;
    LoadXrmServiceToolkitScript();
    if (UsrHasRole("STK Forecast Admin")|| UsrHasRole("STK FORECAST") || UsrHasRole("STK Forecast Leader")||UsrHasRole("STK Sales Plan Admin")|| UsrHasRole("System Administrator")|| UsrHasRole("STK Sales Plan")|| UsrHasRole("STK Sales Plan Leader")) isSalesPlanAdmin = true;
    return isSalesPlanAdmin;
}
function userIsForecastAdmin() {
    var isForecastAdmin = false;

    if (UsrHasRole("STK Forecast Admin")) isForecastAdmin = true;
    return isForecastAdmin;
}
function userIsForecastLead() {
    var isForecastLead = false;

    if (UsrHasRole("STK Forecast Admin") || UsrHasRole("STK Forecast Leader")) isForecastLead = true;
    return isForecastLead;

}
function UsrHasRole(roleName) {
    //debugger;
    var currentUserRoles = Xrm.Page.context.getUserRoles();
    var currentUserName = Xrm.Page.context.getUserName();

    //alert("currentUserName = " + currentUserName);
    for (var i = 0; i < currentUserRoles.length; i++) {
        var userRole = currentUserRoles[i];
        var items;

        items = retrieveRecord("Role", userRole);

        if (items != null) for (var j = 0; j < items.length; j++) {
            //alert("UsrRole = " + items[j]["Name"]);
            if (items[j]["Name"] == roleName) {
                return true;
            }
        }
    }
}

function userCanMarkAsWon(opportunityId, entityName) {
    //debugger;
    var $canMarkAsWon = false;
    var $stkMktId = null;
    var $oppStatus = null;
    var $items = null;
    var usrIsHelpDesk = false;
    var usrCanWrite = false;
    var txtResp = "";

    //alert("Won Opp ID = " + opportunityId+ "\nentityName = " + entityName);
    var userID = Xrm.Page.context.getUserId();

    //alert("User Name = " + Xrm.Page.context.getUserName());
    txtResp = getUserPrivileges(entityName, opportunityId, userID);

    //alert("txtResp = " + txtResp);
    usrCanWrite = parseResponse(txtResp, "WriteAccess");

    //alert("usrCanWrite Won = " + usrCanWrite);
    if (usrCanWrite) {
        usrIsHelpDesk = userIsHelpDesk();

        if (opportunityId != null) {
            //alert("Won Opp ID = " + opportunityId + "\n");
            $items = retrieveRecord("Opportunity", opportunityId);

            if ($items.length > 0) {
                $stkMktId = $items[0]["new_SofttekMarket"].Value;
                $oppStatus = $items[0].StateCode;
            }
        }

        if ($oppStatus != null) {
            //alert("STK Mkt = " + $stkMktId + "\nOppStatus = " + $oppStatus.Value);
            // STK MKT = USA, Europe and HSA
            if ($oppStatus.Value == 0) {
                if ($stkMktId == "100000000" || $stkMktId == "100000005" || $stkMktId == "100000003" || $stkMktId == "100000001" || $stkMktId == "100000006") { //Mexico - 100000001, Cloud - 100000006
                    if (usrIsHelpDesk) {
                        $canMarkAsWon = true;
                    }
                }
                else $canMarkAsWon = true;
            }
        }
    }

    //alert("canMarkAsWon = " + $canMarkAsWon);
    return $canMarkAsWon;
}
function UserRevenuePlanningAllowed() {
    var allowed = false;

    if (UsrHasRole("System Administrator") || UsrHasRole("SFTK CRM HELP DESK") || UsrHasRole("SFTK PIC")) { //|| UsrHasRole("STK FORECAST")
        allowed = true;
    }

    //alert("allowed = " + allowed);
    return allowed;
}

function UserRevenuePlanningAllowedButton() {
    var allowed = false;

    if (UsrHasRole("System Administrator") || UsrHasRole("SFTK CRM HELP DESK") || UsrHasRole("SFTK PIC") || UsrHasRole("STK FORECAST") || UsrHasRole("STK Forecast Leader")) {
        allowed = true;
    }

    //alert("allowed = " + allowed);
    return allowed;
}

function userCanMarkAsLost(opportunityId, entityName) {
    var $canMarkAsLost = false;
    var $oppStatus = null;
    var $items = null;
    var usrCanWrite = false;
    var txtResp = "";

    //alert("Won Opp ID = " + opportunityId+ "\nentityName = " + entityName);
    var userID = Xrm.Page.context.getUserId();

    txtResp = getUserPrivileges(entityName, opportunityId, userID);

    usrCanWrite = parseResponse(txtResp, "WriteAccess");

    //alert("usrCanWrite Lost= " + usrCanWrite);
    if (usrCanWrite) {
        if (opportunityId != null) {
            //alert("Lost Opp ID = " + opportunityId + "\n");
            $items = retrieveRecord("Opportunity", opportunityId);

            if ($items.length > 0) $oppStatus = $items[0].StateCode;
        }

        if ($oppStatus != null) { // Status is Open
            //alert("Opp Status =" + $oppStatus.Value);
            if ($oppStatus.Value == 0) {
                $canMarkAsLost = true;
            }
        }
    }

    //alert("canMarkAsLost = " + $canMarkAsLost);
    return $canMarkAsLost;
}

function userCanReOpen(opportunityId, entityName) {
    var $canReOpen = false;
    var $oppStatus = null;
    var $items = null;
    var usrIsHelpDesk = false;
    var usrCanWrite = false;
    var txtResp = "";

    //alert("Won Opp ID = " + opportunityId+ "\nentityName = " + entityName);
    var userID = Xrm.Page.context.getUserId();

    txtResp = getUserPrivileges(entityName, opportunityId, userID);

    usrCanWrite = parseResponse(txtResp, "WriteAccess");

    //alert("usrCanWrite ReOpen = " + usrCanWrite);
    if (usrCanWrite) {
        usrIsHelpDesk = userIsHelpDesk();

        if (opportunityId != null) {
            //alert("ReOp Opp ID = " + opportunityId + "\n");
            $items = retrieveRecord("Opportunity", opportunityId);

            if ($items.length > 0) $oppStatus = $items[0].StateCode;
        }

        if ($oppStatus != null) { // Status is Won or Lost
            //alert("Opp Status =" + $oppStatus.Value);
            if ($oppStatus.Value != 0 && usrIsHelpDesk) {
                $canReOpen = true;
            }
        }
    }

    //alert("canReOpen = " + $canReOpen);
    return $canReOpen;
}
function userCanModifyRevenue(opportunityId, entityName) {
    var $canModifyRevenue = false;
    var $oppStatus = null;
    var $items = null;
    var usrCanWrite = false;
    var txtResp = "";

    //alert("Won Opp ID = " + opportunityId+ "\nentityName = " + entityName);
    var userID = Xrm.Page.context.getUserId();

    txtResp = getUserPrivileges(entityName, opportunityId, userID);

    usrCanWrite = parseResponse(txtResp, "WriteAccess");

    //alert("usrCanWrite Lost= " + usrCanWrite);
    if (usrCanWrite) {
        if (opportunityId != null) {
            //alert("Lost Opp ID = " + opportunityId + "\n");
            $items = retrieveRecord("Opportunity", opportunityId);

            if ($items.length > 0) $oppStatus = $items[0].StateCode;
        }

        if ($oppStatus != null) { // Status is Open
            //alert("Opp Status =" + $oppStatus.Value);
            if ($oppStatus.Value == 0) {
                $canModifyRevenue = true;
            }
        }
    }

    //alert("canMarkAsLost = " + $canMarkAsLost);
    return $canModifyRevenue;
}

function userAdjustmentAllowed(revenueForecastId) { //revenueForecastId, entityName
    //debugger;
    LoadXrmServiceToolkitScript();
    var entityId = revenueForecastId; //Xrm.Page.data.entity.getId();
    var $canMarkAsWon = false;
    var $RFTypeId = null;
    var $RFStatus = null;
    var $items = null;
    var usrIsHelpDesk = false;
    var usrCanCreate = false;
    var txtResp = "";

    if (entityId != null) {
        $items = retrieveRecord("new_revenueforecast", entityId);
        if ($items.length > 0) {
            $RFTypeId = $items[0].new_Type.Value;
            $RFStatus = $items[0].statecode.Value;
            if ($RFStatus != null) {
                if ($RFStatus == 0) {
                    if ($RFTypeId == "100000000" || $RFTypeId == "100000001") {
                        usrCanCreate = true;
                    }
                }
            }
        }
    }
    return usrCanCreate;
}
function getServerUrl() {
    ///<summary>
    /// Returns the URL for the SOAP endpoint using the context information available in the form
    /// or HTML Web resource.
    ///</summary>
    var OrgServicePath = "/XRMServices/2011/Organization.svc/web";
    var serverUrl = "";

    if (typeof GetGlobalContext == "function") {
        var context = GetGlobalContext();
        serverUrl = context.getClientUrl();
    }
    else {
        if (typeof Xrm.Page.context == "object") {
            serverUrl = Xrm.Page.context.getClientUrl();
        }
        else {
            throw new Error("Unable to access the server URL");
        }
    }

    if (serverUrl.match(/\/$/)) {
        serverUrl = serverUrl.substring(0, serverUrl.length - 1);
    }

    serverUrl = serverUrl + OrgServicePath;

    //alert("Server URL = " + serverUrl);
    return serverUrl;
}

function getUserPrivileges(entityName, entityID, userID) {
    //debugger;
    var serverUrl = getServerUrl();
    var txtResp = "";
    var CanWriteOpp = false;

    var requestMain = "";

    requestMain += "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">";
    requestMain += "  <s:Body>";
    requestMain += "    <Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
    requestMain += "      <request i:type=\"b:RetrievePrincipalAccessRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
    requestMain += "        <a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
    requestMain += "          <a:KeyValuePairOfstringanyType>";
    requestMain += "            <c:key>Target</c:key>";
    requestMain += "            <c:value i:type=\"a:EntityReference\">";
    requestMain += "              <a:Id>" + entityID + "</a:Id>";
    requestMain += "              <a:LogicalName>" + entityName + "</a:LogicalName>";
    requestMain += "              <a:Name i:nil=\"true\" />";
    requestMain += "            </c:value>";
    requestMain += "          </a:KeyValuePairOfstringanyType>";
    requestMain += "          <a:KeyValuePairOfstringanyType>";
    requestMain += "             <c:key>Principal</c:key>";
    requestMain += "             <c:value i:type=\"a:EntityReference\">";
    requestMain += "              <a:Id>" + userID + "</a:Id>";
    requestMain += "              <a:LogicalName>systemuser</a:LogicalName>";
    requestMain += "              <a:Name i:nil=\"true\" />";
    requestMain += "            </c:value>";
    requestMain += "          </a:KeyValuePairOfstringanyType>";
    requestMain += "        </a:Parameters>";
    requestMain += "        <a:RequestId i:nil=\"true\" />";
    requestMain += "        <a:RequestName>RetrievePrincipalAccess</a:RequestName>";
    requestMain += "      </request>";
    requestMain += "    </Execute>";
    requestMain += "  </s:Body>";
    requestMain += "</s:Envelope>";

    var req = new XMLHttpRequest();

    url = serverUrl;

    req.open("POST", url, false)
    // Responses will return XML. It isn't possible to return JSON.
    req.setRequestHeader("Accept", "application/xml, text/xml, */*");
    req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
    req.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");

    req.onreadystatechange = function () {
        if (req.readyState == 4) {
            req.onreadystatechange = null; //Addresses potential memory leak issue with IE
            if (req.status == 200) {
                //Success				
                txtResp = req.responseText;
                LoadScript('https://onesofttekdev.crm.dynamics.com//WebResources/new_XrmServiceToolkit');
                //alert("Success \ntxtResp = " + txtResp);
            }
            else {
                alert(_getError(req.responseText));
            }
        }
    };
    req.send(requestMain);

    return txtResp;
}

function parseResponse(respText, attributeName) {
    var attributeIn = false;
    var xmlhttp;
    var x;
    var xmlDoc2 = null;
    var nUsAg = navigator.userAgent;

    if (nUsAg.indexOf("Safari") != -1) {
        //alert("Safari");
        xmlDoc = new XMLHttpRequest();
        xmlDoc.open('GET', respText, false); // false is synchronous
        xmlDoc.send();
        xmlDoc = xmlDoc.responseXML;
        parser = new DOMParser();
        xmlDoc = parser.parseFromString(respText, "text/xml");
        x = xmlDoc.getElementsByTagName("value");
    }
    else { // code for IE6, IE5
        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async = "false";
        xmlDoc.loadXML(respText);
        x = xmlDoc.getElementsByTagName("c:value");
    }

    var y = "";

    for (var i = 0; i < x.length; i++) {

        if (nUsAg.indexOf("Safari") != -1) y = x[i].childNodes[0].nodeValue;
        else y = x[i].childNodes[0].text;
        //alert("x[" + i + "].childNodes[0].text = " + y);
        var usrPrivileges = y.split(" ");
        //alert("usrPrivileges  "+usrPrivileges);
        //alert("usrPrivileges split = " + usrPrivileges);
        if (usrPrivileges != null) for (var j = 0; j < usrPrivileges.length; j++) {
            //alert("usrPrivileges[" + j + "] = " + usrPrivileges[j]);
            if (usrPrivileges[j] == attributeName) {
                //alert("usrPrivileges = " + usrPrivileges[j]);
                //alert("attributeName = " + attributeName);
                attributeIn = true;
            }
        }
    }

    //alert("attributeIn= " + attributeIn);
    return attributeIn;
}

function _getError(faultXml) {
    var errorMessage = "Error = ";

    if (typeof faultXml == "object") {
        try {
            var bodyNode = faultXml.firstChild.firstChild;
            //Retrieve the fault node
            for (var i = 0; i < bodyNode.childNodes.length; i++) {
                var node = bodyNode.childNodes[i];
                //NOTE: This comparison does not handle the case where the XML namespace changes
                if ("s:Fault" == node.nodeName) {
                    for (var j = 0; j < node.childNodes.length; j++) {
                        var faultStringNode = node.childNodes[j];
                        if ("faultstring" == faultStringNode.nodeName) {
                            errorMessage = faultStringNode.text;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        catch(e) {};
    }
    return new Error(errorMessage + "\n" + faultXml);

}

function LoadScript(src) {
    var src = 'https://softtek.crm.dynamics.com//WebResources/new_XrmServiceToolkit';
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = src;
    head.appendChild(script);
}
function LoadXrmServiceToolkitScript() {
    var src = 'https://softtek.crm.dynamics.com//WebResources/new_XrmServiceToolkit';
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = src;
    head.appendChild(script);
}
function LoadXrmScript() {
    var src = 'https://softtek.crm.dynamics.com//WebResources/new_XrmServiceToolkit';
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = src;
    head.appendChild(script);
	return true;
}